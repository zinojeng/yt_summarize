[
  {
    "id": "f_ui2grDdRMwqOy-5yix0g",
    "status": "complete",
    "url": "https://www.youtube.com/watch?v=cjW6ofe7AY4",
    "timestamp": 1751820862.609208,
    "keep_audio": false,
    "model_type": "gemini",
    "gemini_model": "gemini-2.5-flash-preview-05-20",
    "openai_model": "gpt-4o",
    "progress": {
      "stage": "完成",
      "percentage": 100,
      "message": "摘要生成完成！",
      "timestamp": 1751820999.636575
    },
    "result": {
      "title": "Master Claude Code in 14 Minutes (8 Steps)",
      "summary": "好的，這是一份根據您提供的 YouTube 影片轉錄文本，製作的深度分析與專業整理筆記。筆記嚴格遵循您要求的結構、格式與深度分析標準。\n\n---\n\n## **主要觀點與核心價值**\n\n這份筆記的核心價值在於將影片內容從一系列零散的「技巧」提升為一套**系統化、紀律化的 AI 輔助軟體開發哲學**。講者透過自身成功經驗（創建年收入 30 萬美元的 AI 應用），闡述的核心觀點是：**最大化 AI 編碼工具（如 Claude）效能的關鍵，不在於單純的提示詞技巧，而在於建立一個完整、嚴謹且包含人為監督的開發工作流程。**\n\n此方法的價值體現在以下幾個層面：\n\n1.  **從「被動使用者」到「主動架構師」的轉變**：影片倡導的並非將 Claude 視為一個神奇的黑盒子，輸入需求、等待結果。相反，它要求開發者扮演「系統架構師」與「專案經理」的角色。透過 `Claude.md` 規則檔案設定框架、利用「計畫模式」定義藍圖、透過 GitHub 進行版本控制，開發者始終掌握著專案的主導權，AI 則成為高效執行的夥伴，而非不可控的代理人。\n\n2.  **彌補當前 AI 編碼工具的內在缺陷**：講者敏銳地指出了當前 AI 編碼工具的幾個關鍵短板：缺乏內建的回溯機制（檢查點）、可能產生不安全的程式碼、以及上下文過長導致的「幻覺」與成本浪費。他提出的解決方案——利用 GitHub 作為手動檢查點、強制執行安全審查、戰術性地使用 `/clear` 指令——不僅是實用的技巧，更是對現階段 AI 技術局限性的深刻洞察與應對策略。\n\n3.  **建立「規劃-建構-安全-學習」的開發閉環**：影片中最具洞察力的觀點是其提出的四步開發循環。這超越了傳統的「規劃-建構」模式，加入了至關重要的 **安全（Security）** 和 **學習（Learn）** 兩個環節。這意味著每一次功能開發不僅是程式碼的產出，更是一次安全性的強化和開發者自身知識的積累。這個閉環確保了產出的程式碼不僅能用，而且安全、可維護，同時也加速了開發者（特別是新手）的成長曲線。\n\n4.  **重新定義生產力：將「等待時間」轉化為「創造時間」**：最後一個技巧看似是關於時間管理，實則觸及了人機協作的深層次問題。在與 AI 協作的過程中，必然存在大量的等待時間。講者提出將這段時間用於與另一個 AI 實例進行頭腦風暴，這是一種極具創意的解決方案。它不僅避免了「末日滾動 (doom scrolling)」帶來的精神內耗與效率低下，更將被動的等待轉化為主動的策略思考與創意發想，從而實現了生產力的指數級提升。\n\n總體而言，這份內容的價值不僅在於提供了 8 個具體的 Claude 使用技巧，更在於它為所有希望利用 AI 進行軟體開發的人（無論是專業工程師還是「憑感覺編碼 (vibe coder)」的新手）提供了一套可複製、可擴展、且注重品質與安全的工作方法論。\n\n---\n\n## **內容大綱**\n\n1.  **基礎設定：建立高效的 Claude 互動框架 (`Claude.md`)**\n2.  **策略規劃與執行：善用計畫模式與模型選擇**\n3.  **版本控制與回溯：以 GitHub 作為檢查點系統**\n4.  **多模態應用：利用圖像進行靈感獲取與錯誤修復**\n5.  **上下文管理與成本控制：`/clear` 的戰術性使用**\n6.  **安全審查：彌補 AI 在安全實踐中的不足**\n7.  **學習閉環：從 AI 的產出中學習與成長**\n8.  **生產力最大化：將 AI 等待時間轉化為創造價值時間**\n\n---\n\n## **關鍵術語與概念**\n\n-   **Claude Code**: 指的是整合在開發環境中（如 VS Code）的 Anthropic Claude 模型，作為一個強大的 AI 編碼助理。它不僅能編寫程式碼，還能理解專案的完整上下文。\n\n-   **`Claude.md` (規則檔案)**: 一個在專案根目錄下創建的 Markdown 檔案。Claude 在處理該專案的任何提示時，都會優先讀取此檔案中的指令。這相當於為 AI 設定了全域、持久的行為準則和工作框架。\n\n-   **計畫模式 (Plan Mode)**: Claude Code 的一種特殊互動模式（透過 `Shift + Tab` 兩次觸發）。在該模式下，AI 不會立即編寫程式碼，而是先根據用戶需求生成一份詳細的、分步驟的執行計畫，待用戶確認後再執行。\n\n-   **Opus & Sonnet**: Anthropic 提供的不同等級的 Claude 模型。**Opus** 是最強大、最昂貴的模型，適用於複雜的推理、規劃和策略制定。**Sonnet** 則在速度和成本之間取得了更好的平衡，適合執行已經規劃好的具體任務。\n\n-   **Vibe Coder**: 一個非正式術語，指那些可能沒有深厚計算機科學背景，更多依賴直覺、AI 工具和快速迭代來進行編碼的開發者。講者強調這類開發者尤其需要關注程式碼的安全性。\n\n-   **上下文視窗 (Context Window)**: 指 AI 在一次對話中能夠「記住」的資訊量（包含歷史對話、檔案內容等）。上下文視窗越大，AI 對專案的理解越全面，但同時也會增加處理成本（Token 消耗）和產生「幻覺」（不準確輸出）的風險。\n\n---\n\n## **重要引述與案例**\n\n> \"by forcing Claude code To break down everything it does into tiny little tasks and tiny little building blocks. You're ensuring it makes the best code possible.\"\n> (透過強迫 Claude 將其所做的每件事分解成微小的任務和微小的建構模塊，你正在確保它能產出最好的程式碼。)\n\n**分析**: 這句話揭示了講者工作流程的核心哲學：**任務分解是提升 AI 可靠性的關鍵**。大型、模糊的指令容易導致 AI 產生幻覺或走錯方向。而將複雜需求分解為一系列清晰、可驗證的小任務，不僅降低了單一步驟出錯的機率，也讓開發者能更容易地審查和驗證 AI 的每一步工作。`Claude.md` 中設定的規則正是為了將這種哲學自動化、系統化。\n\n> \"I start with planning to I do execution and then three is security checks, right? ... I'm adding a fourth now plan build security learn.\"\n> (我從規劃開始，然後執行，第三步是安全檢查，對吧？... 我現在加入了第四步：規劃、建構、安全、學習。)\n\n**分析**: 這是影片中最具價值的洞見，提出了一個超越傳統開發流程的**四步閉環模型**。它強調 AI 輔助開發不僅僅是程式碼的生成（規劃與建構），更是一個包含品質保證（安全）和能力提升（學習）的完整生態系統。這個模型將開發者的角色從一個單純的「指令下達者」提升為一個「品質控制者」和「持續學習者」，確保了專案的長期健康度和開發者自身的成長。\n\n> \"if you're Doom scrolling while Claude code works. You're seriously screwing up.\"\n> (如果 Claude 在工作時你卻在滑手機虛度光陰，那你真的搞砸了。)\n\n**分析**: 這句直白的警告點出了人機協作中的一個常見陷阱：**被動等待導致的生產力流失與精神內耗**。講者敏銳地意識到，AI 執行任務的等待時間是寶貴的資源。他提出的解決方案——利用這段時間與另一個 AI 進行頭腦風暴——不僅是時間管理技巧，更是一種心態上的轉變。它倡導將人機協作中的所有間隙都轉化為價值創造的機會，從而實現整體效率的最大化。\n\n---\n\n## **詳細內容分析**\n\n### **1. 基礎設定：建立高效的 Claude 互動框架 (`Claude.md`)**\n\n講者強調，一個精心設計的 `Claude.md` 規則檔案是高品質程式碼與糟糕程式碼的分水嶺。這份檔案的核心作用是為 Claude 設定一套**預設行為模式**，強制其以結構化、任務導向的方式進行思考和工作。講者提供的七條規則，其背後原理是將軟體工程中的**任務分解 (Task Decomposition)** 最佳實踐應用於與 AI 的互動中。\n\n-   **核心機制**: 規則要求 Claude 在執行任何操作前，先將任務分解為一系列步驟，並將這些步驟呈現給用戶以供審批。\n-   **技術細節**: 這些規則甚至會指示 Claude 創建一個專門的資料夾來記錄每次提示所對應的任務列表，這為後續的審查和追溯提供了極大的便利。\n-   **專業洞察**: 這種方法將開發者從一個被動的請求者，轉變為主動的審批者。它在人與 AI 之間建立了一個**確認-執行 (Acknowledge-Execute)** 的循環，極大地降低了因誤解指令而導致大規模重構的風險。講者聲稱，使用這套規則後，他幾個月內沒有遇到過任何 Bug，這證明了該方法的有效性。\n\n### **2. 策略規劃與執行：善用計畫模式與模型選擇**\n\n「計畫模式」被譽為 Claude 中最強大的工具，其精髓在於**將思考與執行分離**。講者提出了兩個關鍵的實踐技巧：\n\n1.  **過度使用計畫模式 (Overuse Plan Mode)**: 對於每一個微小的步驟，都應先進入計畫模式。雖然這看似增加了前期時間，但從長遠來看，它透過確保方向的正確性，避免了後期更大規模的返工，從而節省了大量時間。這是一種典型的「磨刀不誤砍柴工」的策略。\n2.  **策略性模型選擇 (Strategic Model Selection)**:\n    *   **規劃階段**: 使用最強大的 **Opus** 模型 (`/model opus`)。因為規劃需要深刻的理解、推理和創造力，Opus 的高品質輸出能確保計畫的周全與可行性。\n    *   **執行階段**: 使用更具成本效益的 **Sonnet** 模型 (`/model sonnet`)。一旦有了清晰、詳細的計畫，執行的複雜度就大大降低，Sonnet 足以勝任將計畫轉化為程式碼的工作。\n\n-   **影響分析**: 這種模型組合策略不僅保證了最終產出的品質，還能顯著**節省成本**，對於有預算限制的個人開發者或團隊來說至關重要。\n\n### **3. 版本控制與回溯：以 GitHub 作為檢查點系統**\n\n講者指出，與某些競品（如 Cursor）不同，Claude Code 目前缺乏內建的「檢查點」或「回溯」功能。一旦 AI 的修改出現問題，很難輕鬆地回到之前的狀態。為此，他提出了一個極其重要的工作流程整合：**將 GitHub 作為手動的檢查點系統**。\n\n-   **決策流程**:\n    *   **成功**: 如果 Claude 生成的程式碼運行正常、看起來不錯且高效，**立即**將其提交（commit）到 GitHub。講者甚至提到他一天會進行 20 次提交，這體現了**小步快跑、頻繁保存**的敏捷開發思想。\n    *   **失敗**: 如果 Claude 搞砸了，立即放棄當前的修改，從 GitHub 上一個可用的提交版本回溯（rewind/checkout），然後重新開始。\n-   **實踐建議**: 對於不熟悉 Git 的新手，講者建議直接請求 Claude 指導如何進行提交操作，這本身就是一個利用 AI 學習新技能的絕佳範例。\n\n### **4. 多模態應用：利用圖像進行靈感獲取與錯誤修復**\n\nClaude 的多模態能力（理解圖像）為編碼工作流帶來了新的可能性。講者分享了兩個核心應用場景：\n\n1.  **UI/UX 靈感獲取**: 當需要建構一個新的使用者介面時，可以直接對喜歡的應用程式進行螢幕截圖（在 Mac 上使用 `Command + Shift + 4`），然後將圖片拖入 Claude，並給出指令，如「根據這張截圖為我建構 UI」。AI 會分析圖片中的佈局、顏色和元件，並將其轉化為程式碼。\n2.  **視覺化錯誤修復 (Visual Bug Fixing)**: 當應用程式出現 UI 顯示錯誤或佈局混亂時，可以截取錯誤畫面的圖片，發送給 Claude 並要求其修復。這比用純文字描述一個視覺問題要**直觀和高效得多**。\n\n-   **專業洞察**: 這種方法將抽象的設計需求和具體的視覺問題轉化為 AI 可以直接處理的具體輸入，極大地提升了溝通效率，特別是在前端開發中。\n\n### **5. 安全審查：彌補 AI 在安全實踐中的不足**\n\n這是影片中最具責任感和前瞻性的建議之一。講者警告說，當前的 AI 模型尚未完全內化安全編碼的最佳實踐，這使得「憑感覺編碼 (vibe coder)」的開發者在無意中可能發布帶有嚴重安全漏洞的應用。\n\n-   **核心流程**: 在每次完成一個新功能後，都必須運行一次安全檢查。\n-   **關鍵提示詞**:\n    ```\n    Please check through all the code you just wrote and make sure it follows the security best practices. Make sure no sensitive information is in the front end and there are no vulnerabilities people can exploit.\n    (請檢查你剛寫的所有程式碼，確保它遵循安全最佳實踐。確保前端沒有任何敏感資訊，並且沒有可被利用的漏洞。)\n    ```\n-   **重點關注**: 這個提示詞特別強調了兩個最常見的安全問題：\n    1.  **敏感資訊洩漏**: 如 API 金鑰、密碼等不應出現在前端程式碼中。\n    2.  **常見漏洞**: 如 SQL 注入、跨站腳本等。\n-   **影響分析**: 將安全檢查制度化，是從「能用」的程式碼邁向「可靠」的產品的關鍵一步。對於任何計劃公開發布的應用程式來說，這一步驟**絕不可省略**。\n\n---\n\n## **實踐應用與建議**\n\n-   **建議1: 採用「規劃-建構-安全-學習」四步開發循環**\n    *   **實施方法**: 為你開發的每一個功能或模組，都嚴格遵循這個流程。在開始編寫任何程式碼前，使用「計畫模式」與 Opus 模型制定詳細計畫。計畫批准後，讓 Sonnet 模型執行。程式碼生成後，立即使用安全檢查提示詞進行審查。最後，使用學習提示詞讓 Claude 解釋它所做的工作，以加深你的理解。將這個循環內化為你的開發習慣。\n\n-   **建議2: 將 GitHub 整合為不可或缺的工作流程核心**\n    *   **實施方法**: 不要將 GitHub 視為專案完成後才使用的工具。養成**高頻率提交 (High-Frequency Commits)** 的習慣。每當 Claude 完成一個小任務且驗證無誤後，就立刻 `git commit`。這不僅是備份，更是你的專案時間軸和唯一的「撤銷」按鈕。為你的提交訊息寫下清晰的描述，例如「Feature: Add user login form UI」。\n\n-   **建議3: 掌握上下文與成本的動態管理**\n    *   **實施方法**: 養成在完成一個相對獨立的大任務後（例如，一個計畫檔案中的所有任務都已完成）使用 `/clear` 指令的習慣。這能確保下一個任務的對話是在一個乾淨的環境中開始，減少潛在的干擾和成本。同時，嚴格區分使用 Opus 和 Sonnet 的場景，將昂貴的 Opus 模型用在最需要智慧的「規劃」階段。\n\n---\n\n## **相關資源與延伸閱讀**\n\n-   **資源1: Anthropic 官方文件**\n    *   **說明與價值**: 深入了解 Claude 模型特性、`Claude.md` 規則檔案的詳細語法、以及不同模型（Opus, Sonnet, Haiku）的官方使用建議和定價。這是獲取第一手、最準確資訊的最佳來源。\n\n-   **資源2: GitHub Learning Lab**\n    *   **說明與價值**: 影片中提到，不熟悉 Git 的開發者應立即學習。GitHub Learning Lab 提供了免費的、互動式的課程，可以幫助初學者快速掌握 Git 和 GitHub 的基本操作，這是實施影片中「檢查點」策略的必備技能。\n\n-   **資源3: OWASP Top 10 (開放式 Web 應用程式安全專案)**\n    *   **說明與價值**: 影片強調了安全檢查的重要性。OWASP Top 10 是全球公認的、針對最關鍵 Web 應用程式安全風險的權威列表。開發者可以參考此列表，向 Claude 提出更具體的安全檢查要求，例如「請檢查程式碼是否存在 OWASP Top 10 中的注入漏洞」。\n\n---\n\n## **總結與未來展望**\n\n這段影片提供了一套極具價值的**AI 輔助開發方法論**，其核心思想是透過**建立結構化流程和引入嚴格的人為監督**，將 Claude 這樣強大的 AI 工具的潛力發揮到極致，同時有效規避其當前的技術局限性。講者提出的「規劃-建構-安全-學習」四步閉環，以及將 GitHub、多模態輸入和時間管理技巧無縫整合到工作流中，為所有開發者（尤其是新手）提供了一條通往高效、高品質、高安全性軟體開發的清晰路徑。\n\n**未來展望**:\n\n1.  **AI 工具的內建流程化**: 未來的 AI 編碼工具很可能會將影片中提到的這些「手動」最佳實踐內建為原生功能。例如，提供一鍵式的「檢查點」回溯、自動化的安全掃描與報告、以及整合式的「學習模組」，讓開發者能更流暢地實踐這套工作流程。\n\n2.  **開發者角色的演進**: 隨著 AI 承擔越來越多的底層編碼工作，人類開發者的角色將更加側重於**高階設計、策略規劃、系統性思考和最終品質的把關**。精通如何引導、管理和驗證 AI 的產出，將成為比編寫單行程式碼更重要的核心技能。\n\n3.  **結構化提示的普及**: `Claude.md` 所代表的「持久性指令」概念，可能會成為未來與 AI 協作的標準模式。開發者將花更多時間去定義專案級別的規則、約束和目標，而不是在每一次互動中重複相同的指令，這將大幅提升人機協作的效率和一致性。",
      "transcript": "Claude code is the most powerful AI coding tool ever made But what if I told you you're using it all wrong in this video? I'll cover the eight tricks. You need to know to become an absolute Claude code savage I promise you'll build ten times faster after watching this video the tricks I'm about to show you or how I personally launched my own $300,000 a year AI app called creator buddy stick with me and you can do the same. Let's get into it So if you haven't yet make sure the link below download Claude code to follow along with me if you're brand spanking new to it It is I promise you the best AI coding tool ever. It lives up to the hype now. Let's get into those eight pro tricks Having the right Claude rules file is gonna make the difference between absolutely terrible code and absolutely epic code So for those who don't know if you create a Claude dot MD file in your project Everything you put in that file will be read by Claude code Every time you send a prompt after working with Claude code for 12 hours a day for months now These are the best seven rules you can have Basically the way these seven rules work is they instruct Claude code to think in tasks? Everything Claude code does it will break into tasks run those tasks by you and make sure you approve of those step-by-step tasks They'll even create a folder that includes every single set of tasks It does for every prompt you give it so that you can look back to see everything Claude code did by forcing Claude code To break down everything it does into tiny little tasks and tiny little building blocks. You're ensuring it makes the best code possible I'm not kidding with these seven rules Claude code hasn't written me a single bug in months So make sure to pause the video Grab the rules from down below in the description and put them in your own Claude MD file if you haven't yet I promise you'll instantly get way better code The next trick I want to talk about is using plan mode correctly Plan mode if used correctly is the most powerful tool inside Claude because it'll make sure you get the results You're looking for every time Claude works So again for those who don't know to go into plan mode you just open up Claude code and you hit shift tab twice And that gets you to plan mode on from here What do you want to make sure you do before having Claude code do anything you want to go into plan mode? Describe exactly what you want Claude to do and then have Claude build that plan for you So for instance, I'm working on this AI automation app and I wanted to build out a to-do list in the app So I describe in detail exactly what I want to build out in plan mode I hit enter and the way Claude code is gonna work instead of writing any code It's gonna build out the plan. You probably already knew that but here's the two tricks You need to know one is you want to overuse plan mode? I found when I just fire from the hip and don't use plan mode It messes up more than it doesn't when I've combined my rule set I showed you earlier and combine that with plan mode before every step Claude code has been flawless for me No errors at all. So before you do anything you need to be using plan mode for every single micro step It might seem like it's taking up a lot of time But you're actually saving a ton of time in the long run And the second thing you want to know about plan mode is which models to use when it comes to plan mode You want to be using opus I use opus for plan mode and then I use sonnet for executing on that plan So what do you want to do is you want to hit slash? Model space and then whatever model you want to use so for planning do slash model opus then hit enter and then for Execution after you've built your plan you want to do slash model sonnet and what this will do is two things Make sure your planning is incredible But also save you a lot of money as long as your plans are really good You don't need opus to do the execution sonnet will do it really well So especially for those in the seventeen dollar a month plan or a hundred dollar a month plan This will allow you to get as many uses as you need throughout the entire month critical you use plan mode correctly The next trick you need to know about is saving your spot with checkpoints So the number one question I get about Claude code is how do I rewind if Claude code messes up? People are used to cursor when you're in cursor and you're using the cursor agent You can easily rewind by clicking on checkpoints in the agent, but that doesn't exist in Claude code You can't rewind to certain checkpoints So the key is using github correctly If you are constantly saving your code to github after every single step You'll be able to easily go back and rewind your code in case Claude ever messes up So here's my decision making tree with github, right? If if Claude writes code and it works and it looks good and it's efficient and all that I immediately commit that to github every single step I'm making like 20 commits a day if Claude messes up. I'll go back to my last commit So I'll rewind that last commit and start over again with Claude code This is how you make up for the lack of checkpoints like cursor agent has is by using github as your checkpoint system If you're a new programmer and you haven't worked github into your workflow yet Make sure you do that sign up for github and start committing your code immediately If you're not familiar with how to do that just ask Claude code to do it for you and it'll work it for you perfectly The next trick I want to teach you about is when to paste in images to Claude code so for those who don't know you actually Can bring in images to Claude code and Claude can see those images and write code based on it I like to use images in two instances one when I want to give Claude Inspiration and two when I'm fixing bugs for instance I'm building out this to-do list app right now and I want to take inspiration from tick tick Which is my favorite to-do list app so if you're on Mac You can hit command shift 4 and then it allows you to screenshot So you just drag it across your screen like that that saves an image and then all you need to do now is take that Image and bring it into Claude code. So what do you want to do? Then is take that screenshot drag it into Claude now, it's in there now You can do something like say hey Claude build me out the UI from the screenshot I just sent you so I said I want to add a to-do list to this app that looks like this I hit enter Claude will take the inspiration screenshot I sent it and start building that out inside the app and you can see right there It's reading the screenshot as we go The second way I like to use screenshots inside Claude code is fixing bugs So if Claude code builds out some code that doesn't look good or the app doesn't look right You can easily screenshot the app or screenshot the error put that in and say hey fix this error or make this look prettier So I use it for inspiration and fixing bad UI and bugs The next tip is very very critical Especially if you're not on the most expensive tier of Claude code and that is using slash clear I use slash clear so much for many different reasons a lot of people when talking to AI or talking to Claude They just keep giving commands for hours and hours and hours. You shouldn't be doing this You should be clearing your context as much as humanly possible. This does two things it reduces Hallucinations by reducing the amount of information you're sending to Claude and two it saves you cost if you have a large Context window and you've been typing for hours and hours and hours to Claude code It's sending all that context to Claude which is taking up a lot of tokens So if you're on the $17 a month plan or the $100 a month plan You can really eat through that quickly if you're not doing slash clear a lot Here's when you do slash clear anytime Claude finishes a decent sized task So for instance, if Claude has completed all the tasks in one of its task files that it wrote for you Then you want to do slash clear. So you want to be using slash clear a lot So a it reduces hallucinations in B. It saves you money The next trip is Hypercritical especially if you've never coded before and that is running security checks The number one issue vibe coders are having right now is that they're shipping insecure code It just isn't built into the AI's yet how to write code that is super secure or goes by security best practices So if you are building an app that you ever plan to ship to the internet one day and have other people use You need to make sure it's secure a lot of vibe coders are having their apps hacked and taken down Because of bad security practices. Here's what I try to remember for everything. I build in Claude code one I start with planning to I do execution and then three is security checks, right? So every time you build a new feature in your app, you're planning then you're building and then you're doing a security check So say Claude just finished building a feature into your app, right? It went through the entire plan and finish the plan You want to make sure every time Claude finishes a chunk of code or a feature? You run this security check that I'm about to show you here and keep in mind all these prompts Put down below as well. So here's the prompt you want to put in every single time Claude finishes a feature Please check through all the code you just wrote and make sure it follows the security best practices Make sure no sensitive information is in the front end and there are no vulnerabilities people can exploit if you run this prompt Every time you build a feature Claude will make sure you have very secure code The biggest mistake people make is they'll put secure information in the front end Whether it's API keys or passwords or things like that This will ensure that all your information is in the back end and you have no vulnerabilities people can exploit again If you're a brand new coder, you must must must do this a thousand times during your coding sessions It's impossible to do this too much again prompt down below. Make sure to pause and grab that and put that into your note file The seventh trick we're gonna get into that's critical to know if you're building a Claude code is earning the code that Claude's Actually building so I strongly believe people who have never written code before in their lives can use Claude code to build Incredible apps that generate them money But I also think it's important that you understand what Claude is building out Even if you've never coded before so I gave you three steps before that I do for every single feature Claude builds out, right? Plan build security while I'm adding a fourth now plan build security learn After every time Claude finishes a feature and make sure it's secure I go in and I give Claude this prompt Please explain the functionality and code you just built out in detail Walk me through what you changed and how it works Act like you're a senior engineer teaching me code and what this does is it helps you? Understand what Claude is building out even better You don't need to know how to code to use Claude code But the more you understand what Claude is building out the better your prompting will become right if you understand all the code And how the data flows through your app? You'll be able to give much better more detailed prompts to Claude on what it is You want it to build out and the better the prompts the better the results you're gonna get So if you want to improve your prompting and you want to improve what Claude builds out You need to make sure you understand what it's building So pause the video take this prompt from down below Save it and use it every time you've done your security check so you can learn what Claude built out It's the last tip I'm gonna give you and honestly This might be my favorite one of them all because it has made my time using Claude code So much more productive and so much better for my mental health is using the time wisely when Claude code is working Here's the challenge with Claude code is it's incredible. It's amazing It is the most powerful AI coding tool ever But it takes a lot of time to build code And I don't know about you when Claude is really working sometimes 15 20 30 minutes at a time I get distracted. I start doom scrolling and I'll find that maybe I watch a YouTube video for two hours While Claude code worked for 20 minutes. It has led to me spending my time so inefficient It's also just straight-up bad for your mental health to be doom scrolling for 80% of the time you're doing things So I came up with the solution So I went to Claude and I gave it this prompt about 30 minutes I went to Claude and I gave it this prompt and I swear to you this prompt has changed everything for me I told Claude when I am coding with AI there are long breaks in between me giving commands to the AI Typically, I spend that time doom scrolling which distracts me and puts me in a bad mental state I'd like to use that time to chat with you to generate new ideas and also reflect on my other ideas and business and content And now what I do as Claude code is working and building me code I come back to this chat and I just say hello to this chat. I say what Claude code is working on I say what I'm thinking about in this AI will just bounce ideas off me help me refocus Help me figure out what the next steps for Claude code should be and generally make that 80% of time Claude code is working way more productive way more efficient and put me in a way better mental state I swear to you. My productivity has gone up 4,000% since using this trick you just got to have discipline You just got to make sure every single time Claude code is completing a task you go to this chat You don't pick up your phone in doom scroll. You don't go to YouTube and watch endless videos You don't go to tick tock and watch brain rot all day. You got to be disciplined You got to make sure every time Claude code is working You come to this chat in this chat only and start bouncing ideas off the AI because this chat I swear to God I've come up with like 30 other ideas for apps that I'm now building out that will eventually start making me money if you're Doom scrolling while Claude code works. You're seriously screwing up I'll have the prompt for this down below as well If you take all the prompts I just gave you all the little tips and tricks and put them into your workflow immediately I promise you you'll build ten times faster and your apps will be ten times higher quality Let me know down there applies which these tricks were your favorite if you learned anything at all Make sure to subscribe make sure to turn on notifications All I do is make banger videos about AI and I'll see you in the next video\n\n",
      "model_used": "gemini-2.5-pro-preview-06-05",
      "processing_time": 137.0251181125641,
      "status": "success"
    },
    "error": null,
    "is_cancelled": false,
    "created_at": "2025-07-07T00:54:22.609267",
    "updated_at": "2025-07-07T00:56:39.636665"
  },
  {
    "id": "4XQWKEUkIg9Vdm1r2mB_fQ",
    "status": "complete",
    "url": "https://www.youtube.com/watch?v=cjW6ofe7AY4",
    "timestamp": 1751822196.0334852,
    "keep_audio": false,
    "model_type": "openai",
    "gemini_model": "gemini-2.5-flash-preview-05-20",
    "openai_model": "gpt-4o",
    "progress": {
      "stage": "摘要",
      "percentage": 100,
      "message": "生成摘要時發生錯誤: Error code: 400 - {'error': {'message': \"Unsupported parameter: 'max_tokens' is not supported with this model. Use 'max_completion_tokens' instead.\", 'type': 'invalid_request_error', 'param': 'max_tokens', 'code': 'unsupported_parameter'}}",
      "timestamp": 1751822240.077049
    },
    "result": {
      "status": "error",
      "message": "生成摘要時發生錯誤: Error code: 400 - {'error': {'message': \"Unsupported parameter: 'max_tokens' is not supported with this model. Use 'max_completion_tokens' instead.\", 'type': 'invalid_request_error', 'param': 'max_tokens', 'code': 'unsupported_parameter'}}",
      "processing_time": 44.041606187820435,
      "summary": null,
      "model_used": null
    },
    "error": null,
    "is_cancelled": false,
    "created_at": "2025-07-07T01:16:36.033498",
    "updated_at": "2025-07-07T01:17:20.077388"
  },
  {
    "id": "FENfJ8jyFYOFFuiUHu1wRg",
    "status": "complete",
    "url": "https://www.youtube.com/watch?v=cjW6ofe7AY4",
    "timestamp": 1751822264.2719831,
    "keep_audio": false,
    "model_type": "openai",
    "gemini_model": "gemini-2.5-flash-preview-05-20",
    "openai_model": "gpt-4o",
    "progress": {
      "stage": "完成",
      "percentage": 100,
      "message": "摘要生成完成！",
      "timestamp": 1751822327.233461
    },
    "result": {
      "title": "Master Claude Code in 14 Minutes (8 Steps)",
      "summary": "## **主要觀點與核心價值**\n\n影片的核心在於介紹如何高效使用Claude Code這款強大的AI編程工具，通過八個關鍵技巧來提升開發效率和代碼質量。講者分享了他個人成功的經驗，強調了Claude Code的潛力，並指出許多用戶在使用該工具時存在誤區。這些技巧不僅能幫助開發者避免常見錯誤，還能顯著提高開發速度和代碼的可靠性。講者特別強調了Claude Code的規則文件、計劃模式、GitHub的使用、圖像導入、清除命令等功能的正確使用方法，並提供了實際應用的建議。這些技巧的應用不僅能幫助開發者創建出色的應用程式，還能節省開發成本和時間。\n\n---\n\n## **內容大綱**\n\n1. Claude Code的規則文件設定\n2. 計劃模式的正確使用\n3. GitHub作為版本控制工具\n4. 圖像導入的應用場景\n5. 清除命令的使用策略\n6. 理解Claude Code生成的代碼\n7. 提升提示質量的重要性\n\n---\n\n## **關鍵術語與概念**\n\n- **Claude Code**: 一款強大的AI編程工具，能夠自動生成代碼並進行錯誤修復。\n- **規則文件（Claude.md）**: 用於指導Claude Code執行特定任務的配置文件。\n- **計劃模式（Plan Mode）**: 一種功能模式，幫助用戶在編碼前制定詳細計劃。\n- **GitHub**: 一個版本控制平台，用於管理和存儲代碼。\n- **清除命令（/clear）**: 用於重置Claude Code的上下文，以減少錯誤和節省資源。\n\n---\n\n## **重要引述與案例**\n\n> \"Having the right Claude rules file is going to make the difference between absolutely terrible code and absolutely epic code.\"\n\n**分析**: 此引述強調了Claude Code規則文件的重要性，指出其對代碼質量的直接影響。正確配置規則文件可以顯著提高代碼的可靠性和效率。\n\n> \"If you're constantly saving your code to GitHub after every single step, you'll be able to easily go back and rewind your code in case Claude ever messes up.\"\n\n**分析**: 這段話強調了GitHub在版本控制中的重要性，尤其是在使用Claude Code時，GitHub可以作為一種回溯機制，幫助開發者在出錯時快速恢復。\n\n---\n\n## **詳細內容分析**\n\n### **Claude Code的規則文件設定**\n\nClaude Code的規則文件（Claude.md）是用來指導AI如何分解任務並逐步執行的。這種設定能夠確保每個步驟都經過用戶的審核，從而減少錯誤的發生。這種方法的優勢在於它能夠將複雜的編程任務分解為更小的可管理部分，從而提高代碼的質量和可讀性。\n\n### **計劃模式的正確使用**\n\n計劃模式是Claude Code中一個強大的工具，允許用戶在編碼之前制定詳細的計劃。這種方法不僅能夠提高開發效率，還能確保每個步驟都符合用戶的需求。講者建議在每個微步驟之前都使用計劃模式，以避免出錯並節省時間。\n\n### **GitHub作為版本控制工具**\n\n使用GitHub進行版本控制是避免Claude Code錯誤的一種有效方法。通過在每個步驟後提交代碼，用戶可以輕鬆回溯到之前的版本，這對於沒有內建回溯功能的Claude Code尤為重要。這種方法不僅提高了開發的靈活性，還增加了代碼的安全性。\n\n### **圖像導入的應用場景**\n\nClaude Code允許用戶導入圖像作為靈感或錯誤修復的參考。這種功能特別適合於需要視覺參考的應用場景，如UI設計或錯誤調試。通過將圖像導入Claude Code，用戶可以更直觀地指導AI生成符合需求的代碼。\n\n### **清除命令的使用策略**\n\n清除命令（/clear）是管理Claude Code上下文的一種有效方法。通過定期清除上下文，用戶可以減少AI的錯誤率並節省資源。這在長時間的開發過程中特別重要，因為它能夠防止上下文過載導致的錯誤。\n\n---\n\n## **實踐應用與建議**\n\n- **建議1**: 定期更新Claude.md規則文件，以確保代碼質量。\n- **建議2**: 在每個開發步驟中使用計劃模式，避免錯誤發生。\n- **建議3**: 使用GitHub進行版本控制，確保代碼的安全性和可回溯性。\n\n---\n\n## **相關資源與延伸閱讀**\n\n- **Claude Code官方文檔**: 提供詳細的功能介紹和使用指南。\n- **GitHub使用指南**: 幫助新手快速掌握版本控制的基本操作。\n- **AI編程工具比較**: 分析不同AI工具的優勢和劣勢，幫助選擇合適的工具。\n\n---\n\n## **總結與未來展望**\n\nClaude Code作為一款先進的AI編程工具，為開發者提供了強大的功能和靈活的操作方式。通過正確使用規則文件、計劃模式和GitHub等工具，開發者可以顯著提高開發效率和代碼質量。未來，隨著AI技術的進一步發展，Claude Code有望在更多領域中發揮作用，成為開發者不可或缺的助手。隨著AI技術的進步，這類工具將在更廣泛的應用場景中發揮更大的作用，並可能引領編程方式的革新。",
      "transcript": "Claude code is the most powerful AI coding tool ever made. But what if I told you you're using it all wrong? In this video, I'll cover the eight tricks you need to know to become an absolute Claude code savage. I promise you'll build 10 times faster after watching this video. The tricks I'm about to show you are how I personally launched my own $300,000 a year AI app called Creator Buddy. Stick with me and you can do the same. Let's get into it. So if you haven't yet, make sure at the link below, download Claude code to follow along with me. If you're brand spanking new to it, it is, I promise you, the best AI coding tool ever. It lives up to the hype. Now let's get into those eight pro tricks. Having the right Claude rules file is going to make the difference between absolutely terrible code and absolutely epic code. So for those who don't know, if you create a Claude.md file in your project, everything you put in that file will be read by Claude code every time you send a prompt. After working with Claude code for 12 hours a day for months now, these are the best seven rules you can have. Basically the way these seven rules work is they instruct Claude code to think in tasks. Everything Claude code does, it will break into tasks, run those tasks by you, and make sure you approve those step-by-step tasks. They'll even create a folder that includes every single set of tasks it does for every prompt you give it, so that you can look back to see everything Claude code did. By forcing Claude code to break down everything it does into tiny little tasks and tiny little building blocks, you're ensuring it makes the best code possible. I'm not kidding, with these seven rules, Claude code hasn't written me a single bug in months. So make sure to pause the video, grab the rules from down below in the description, and put them in your own Claude.md file if you haven't yet. I promise you'll instantly get way better code. The next trick I want to talk about is using plan mode correctly. Plan mode, if used correctly, is the most powerful tool inside Claude, because it'll make sure you get the results you're looking for every time Claude works. So again, for those who don't know, to go into plan mode, you just open up Claude code and you hit shift tab twice, and that gets you to plan mode on. From here, what you want to make sure you do before having Claude code do anything, you want to go into plan mode, describe exactly what you want Claude to do, and then have Claude build that plan for you. So for instance, I'm working on this AI automation app, and I want it to build out a to-do list in the app. So I describe in detail exactly what I want to build out in plan mode, I hit enter, and the way Claude code is going to work, instead of writing any code, it's going to build out the plan. You probably already knew that, but here's the two tricks you need to know. One is you want to overuse plan mode. I've found when I just fire from the hip and don't use plan mode, it messes up more than it doesn't. When I've combined my rule set I showed you earlier, and combine that with plan mode before every step, Claude code has been flawless for me, no errors at all. So before you do anything, you need to be using plan mode for every single micro step. It might seem like it's taking up a lot of time, but you're actually saving a ton of time in the long run. And the second thing you want to know about plan mode is which models to use. When it comes to plan mode, you want to be using Opus. I use Opus for plan mode, and then I use Sonnet for executing on that plan. So what you want to do is you want to hit slash model space, and then whatever model you want to use. So for planning, do slash model Opus, then hit enter. And then for execution, after you've built your plan, you want to do slash model Sonnet. And what this will do is two things, make sure your planning is incredible, but also save you a lot of money. As long as your plans are really good, you don't need Opus to do the execution. Sonnet will do it really well. So especially for those in the $17 a month plan or $100 a month plan, this will allow you to get as many uses as you need throughout the entire month. Critical use plan mode correctly. The next trick you need to know about is saving your spot with checkpoints. So the number one question I get about Claude code is how do I rewind if Claude code messes up? People are used to cursor. When you're in cursor and you're using the cursor agent, you can easily rewind by clicking on checkpoints in the agent. But that doesn't exist in Claude code. You can't rewind to certain checkpoints. So the key is using GitHub correctly. If you are constantly saving your code to GitHub after every single step, you'll be able to easily go back and rewind your code in case Claude ever messes up. So here's my decision-making tree with GitHub, right? If Claude writes code and it works and it looks good and it's efficient and all that, I immediately commit that to GitHub every single step. I'm making like 20 commits a day. If Claude messes up, I'll go back to my last commit. So I'll rewind to that last commit and start over again with Claude code. This is how you make up for the lack of checkpoints like cursor agent has is by using GitHub as your checkpoint system. If you're a new programmer and you haven't worked GitHub into your workflow yet, make sure you do that. Sign up for GitHub and start committing your code immediately. If you're not familiar with how to do that, just ask Claude code to do it for you and it'll work it for you perfectly. The next trick I wanna teach you about is when to paste in images to Claude code. So for those who don't know, you actually can bring in images to Claude code and Claude can see those images and write code based on it. I like to use images in two instances. One, when I wanna give Claude inspiration and two, when I'm fixing bugs. For instance, I'm building out this to-do list app right now and I want to take inspiration from TickTick, which is my favorite to-do list app. So if you're on Mac, you can hit command shift four and then it allows you to screenshot. So you just drag it across your screen like that. That saves an image. And then all you need to do now is take that image and bring it into Claude code. So what do you wanna do then is take that screenshot, drag it into Claude. Now it's in there. Now you can do something like say, hey, Claude builds me out the UI from the screenshot I just sent you. So I said, I wanna add a to-do list to this app that looks like this. I hit enter, Claude will take the inspiration screenshot I sent it and start building that out inside the app. And you can see right there, it's reading the screenshot as we go. The second way I like to use screenshots inside Claude code is fixing bugs. So if Claude code builds out some code that doesn't look good or the app doesn't look right, you can easily screenshot the app or screenshot the error, put that in and say, hey, fix this error or make this look prettier. So I use it for inspiration and fixing bad UI and bugs. The next tip is very, very critical, especially if you're not on the most expensive tier of Claude code. And that is using slash clear. I use slash clear so much for many different reasons. A lot of people when talking to AI or talking to Claude, they just keep giving commands for hours and hours and hours. You shouldn't be doing this. You should be clearing your context as much as humanly possible. This does two things. It reduces hallucinations by reducing the amount of information you're sending to Claude and two, it saves you cost. If you have a large context window and you've been typing for hours and hours and hours to Claude code, it's sending all that context to Claude, which is taking up a lot of tokens. So if you're on the $17 a month plan or the $100 a month plan, you can really eat through that quickly if you're not doing slash clear a lot. Here's when you do slash clear. Anytime Claude finishes a decent size task. So for instance, if Claude has completed all the tasks in one of its task files that it wrote for you, then you wanna do slash clear. So you wanna be using slash clear a lot. So A, it reduces hallucinations and B, it saves you money. The next trick we're gonna get into that's critical to know if you're building with Claude code is learning the code that Claude's actually building. So I strongly believe people who have never written code before in their lives can use Claude code to build incredible apps that generate them money. But I also think it's important that you understand what Claude is building out even better. You don't need to know how to code to use Claude code, but the more you understand what Claude is building out, the better your prompting will become, right? If you understand all the code and how the data flows through your app, you'll be able to give much better, more detailed prompts to Claude on what it is you want it to build out. And the better the prompts, the better the results you're gonna get. So if you wanna improve your prompting and you wanna improve what Claude builds out, you need to make sure you understand what it's building. So pause the video, take this prompt from down below, save it and use it every time you've done your security check so you can learn what Claude built out. So the last tip I'm gonna give you, and honestly,\n\n",
      "model_used": "gpt-4o",
      "processing_time": 62.958749294281006,
      "status": "success"
    },
    "error": null,
    "is_cancelled": false,
    "created_at": "2025-07-07T01:17:44.272000",
    "updated_at": "2025-07-07T01:18:47.233680"
  },
  {
    "id": "a0CIUB91rzJMebFgoKmbIw",
    "status": "complete",
    "url": "https://www.youtube.com/watch?v=cjW6ofe7AY4",
    "timestamp": 1751822975.2433112,
    "keep_audio": false,
    "model_type": "openai",
    "gemini_model": "gemini-2.5-flash-preview-05-20",
    "openai_model": "o4-mini",
    "progress": {
      "stage": "摘要",
      "percentage": 100,
      "message": "生成摘要時發生錯誤: Error code: 400 - {'error': {'message': \"Unsupported parameter: 'max_tokens' is not supported with this model. Use 'max_completion_tokens' instead.\", 'type': 'invalid_request_error', 'param': 'max_tokens', 'code': 'unsupported_parameter'}}",
      "timestamp": 1751823021.301735
    },
    "result": {
      "status": "error",
      "message": "生成摘要時發生錯誤: Error code: 400 - {'error': {'message': \"Unsupported parameter: 'max_tokens' is not supported with this model. Use 'max_completion_tokens' instead.\", 'type': 'invalid_request_error', 'param': 'max_tokens', 'code': 'unsupported_parameter'}}",
      "processing_time": 46.05386710166931,
      "summary": null,
      "model_used": null
    },
    "error": null,
    "is_cancelled": false,
    "created_at": "2025-07-07T01:29:35.243383",
    "updated_at": "2025-07-07T01:30:21.302078"
  }
]